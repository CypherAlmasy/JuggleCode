{"name":"Jugglecode","tagline":"Manipulate PHP statements in scriptfiles","body":"# Description\r\n\r\nJuggleCode is a tool to manipulate PHP statements in scriptfiles.\r\n\r\n\r\n# Features\r\n\r\nJuggleCode can:\r\n\r\n- Join multiple PHP files into a single outfile\r\n- Remove comments from PHP files\r\n- Oppress or replace function and method calls in PHP scripts\r\n\r\n\r\n# Usage\r\n\r\nJuggleCode always expects a PHP script as input. The output is redirected to stdout per default, but can get captured to a file.\r\n\r\nExample: the two files file1.php and file2.php form a PHP application and should get distributed in one file only (with the name app.php).\r\n\r\nfile1.php:\r\n\r\n \t<?php\r\n \t# file1.php:\r\n \techo 'File 1',PHP_EOL;\r\n \trequire('file2.php');\r\n\r\nfile2.php:\r\n\r\n \t<?php\r\n \t# file2.php:\r\n \techo 'File 2',PHP_EOL;\r\n\r\nTo combine these two files into app.php, a short PHP scripts needs to be written:\r\n\r\n \trequire('vendor/codeless/jugglecode/src/JuggleCode.php');\r\n\r\n \t$j = new JuggleCode();\r\n \t$j->masterfile = 'file1.php';\r\n \t$j->outfile = 'app.php';\r\n \t$j->mergeScripts = true;\r\n \t$j->run();\r\n\r\nThe first three lines of the above script can get combined to:\r\n\r\n \t$j = new JuggleCode('file1.php', 'app.php');\r\n\r\nThe result of the merging-process will look like this:\r\n\r\n \t<?php\r\n \t# file1.php:\r\n \techo 'File 1',PHP_EOL;\r\n \t# file2.php:\r\n \techo 'File 2',PHP_EOL;\r\n\r\nBe aware that -- when $mergeScripts is enabled -- only scripts that are identified as PHP-scripts (by their extension) are merged into the outfile! Files with the extension .inc are not merged.\r\n\r\nIt is also possible to merge only specific files. Imagine the following script.php:\r\n\r\n \t<?php\r\n \trequire('lib.php');\r\n \trequire('debug.php');\r\n \t# ...\r\n\r\nTo only join script.php with lib.php, run:\r\n\r\n \t<?php\r\n \t$j = new JuggleCode();\r\n \t$j->masterfile = 'script.php';\r\n \t$j->outfile = 'app.php';\r\n \t$j->mergeFile('lib.php');\r\n \t$j->run();\r\n\r\nThe output would be:\r\n\r\n \t<?php\r\n \t# Contents of lib.php\r\n \t# ...\r\n \trequire('debug.php');\r\n \t# ...\r\n\r\nDynamic inclusion of files is left intact, even if mergeScripts is enabled:\r\n\r\n \t# This will not change:\r\n \t$file = 'somedata';\r\n \trequire($file . '.txt');\r\n\r\nTo disable comments in the output, use:\r\n\r\n \t$j->comments = false;\r\n\r\nOppress function- and method-calls:\r\n\r\n \t$j->oppressFunctionCall('str_replace'); # Oppress all calls to str_replace\r\n \t$j->oppressMethodCall('$foo', 'foo'); # Oppress all calls to $foo->foo()\r\n \t$j->oppressMethodCall('Foo', 'foo'); # Oppress all calls to Foo::foo()\r\n\r\nReplace function- and method-calls:\r\n\r\n \t# Replace all calls to str_replace with str_ireplace:\r\n \t$j->replaceFunctionCall('str_replace', 'str_ireplace(%args%)');\r\n\r\n \t# Replace all calls to $foo->foo() with foo():\r\n \t$j->replaceMethodCall('$foo', 'foo', 'foo(%args%)');\r\n\r\n\r\n# Installation\r\n\r\nJuggleCode is easily installed using Packagist/Composer.\r\n\r\n\r\n# Ideas for using JuggleCode\r\n\r\n- Deploying PHP applications in a single file and in different versions: one version with included debugging features, the other version without\r\n\r\n\r\n# Ideas for improving JuggleCode\r\n\r\n- Allow the creation of single-file PHP patch-scripts that can overwrite PHP statements in one or multiple other PHP files\r\n- Oppressing or replacing the body of function or method definitions (replaceMethodBody, replaceFunctionBody)\r\n- Improve the code by seperating the JuggleCode class into multiple classes, e.g one for methods, one for functions, asf.\r\n- Convert JuggleCode to a PHP extension (see PHP Preprocessors like http://www.ohloh.net/p/pihipi and http://code.metala.org/p/ccpp)\r\n- Find empty functions and methods; automatically oppress definitions of those and also the calls\r\n- Generate templateable scripts from a non-templateable PHP scriptfile\r\n\r\n\r\n# Credits and Bugreports\r\n\r\nJuggleCode was written by Codeless (http://www.codeless.at/). All bugreports can be directed to more@codeless.at. Even better, bugreports are posted on the github-repository of this package: https://www.github.com/codeless/jugglecode.\r\nJuggleCode would not have been possible if there isn't nikic's PHP-Parser package: <https://www.github.com/nikic/php-parser>.\r\n\r\n\r\n# License\r\n\r\nThis work is licensed under a Creative Commons Attribution-ShareAlike 3.0 Unported License:\r\n<http://creativecommons.org/licenses/by-sa/3.0/deed.en_US>\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}